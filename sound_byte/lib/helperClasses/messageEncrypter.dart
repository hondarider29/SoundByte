import 'package:encrypt/encrypt.dart';
import 'package:password/password.dart';

/// Key length. 32 is standard.
final length = 32;

/// An encryption object
///
/// Generates keys and encrypts messages. No knowledge of encryption necessary.
class MessageEncrypter
{
  Key passkey;
  Key textkey;
  IV iv;

  /// Initializes the original MessageEncrypter from just a password.
  ///
  /// [password] can be any string, use either the user's password or something generated from it
  /// Use when generating a set of encryption keys. FIRST TIME ONLY.
  MessageEncrypter(String password)
  {
    passkey = _generateKeyFromPassword(password);
    textkey = _generateTextEncryptingKey();
    iv = IV.fromLength(16);
  }

  /// Initializes a MessageEncrypter for the recipient after the original is generated.
  ///
  /// [password] can be any string, use either the user's password or something generated from it
  /// [keyData] should be the [MessageEncrypter.textKey] of the sender, [ivData] the [MessageEncrypter.ivText]
  /// Use when receiving a set of encryption keys. FIRST TIME ONLY.
  MessageEncrypter.forReceiver(String password, String keyData, String ivData)
  {
    passkey = _generateKeyFromPassword(password);
    textkey = Key.fromBase64(keyData);
    iv = IV.fromBase64(ivData);
  }

  /// Retrieves a MessageEncrypter from a string.
  ///
  /// [password] can be any string, use the same thing you used for [MessageEncrypter()] or [MessageEncrypter.forReceiver()]
  /// [retrievedData] should be the [MessageEncrypter.encodeData()] from a previous session
  /// Use when recreating an encrypter. SECOND TIME AND ON ONLY.
  MessageEncrypter.rehydrate(String password, String retrievedData)
  {
    passkey = _generateKeyFromPassword(password);

    var textkeyAndIv = _decodeRetrieved(retrievedData);
    var encryptedKey = textkeyAndIv[0];
    iv = textkeyAndIv[1];

    var keyDecrypter = Encrypter(AES(passkey));
    var decrypted = keyDecrypter.decrypt(encryptedKey, iv: iv);

    textkey = Key.fromBase64(decrypted);
  }

  /// Generates a Key for encrypting messages.
  ///
  /// Only should be called by [MessageEncrypter()].
  Key _generateTextEncryptingKey()
  {
    final key = Key.fromSecureRandom(length);

    return key;
  }

  /// Generates a Key for encrypting the message key, using the user's password as a seed.
  ///
  /// [password] can be any string.
  Key _generateKeyFromPassword(String password)
  {
    final hash = Password.hash(password, PBKDF2(desiredKeyLength: length));
    final key = Key.fromUtf8(hash.split('\$')[hash.split('\$').length - 1].substring(0, length));

    return key;
  }
  
  /// Breaks a string (must come in the format of "keyText,iv") into usable data.
  ///
  /// Intended to only be used on text generated by [MessageEncrypter.encodeData()].
  List _decodeRetrieved(String data)
  {
    List<String> args;
    
    args = data.split(',');

    var keyText = Encrypted.fromBase64(args[0]);
    var iv = IV.fromBase64(args[1]);

    return [keyText, iv];
  }

  /// Encrypts text using the text key
  ///
  /// [text] is the plaintext of whatever message needs to be sent.
  /// Returns the encrypted text of the message.
  String encrypt(String text)
  {
    var encrypter = Encrypter(AES(textkey));

    return encrypter.encrypt(text, iv: iv).base64;
  }

  /// Decrypts a cipher using the text key
  ///
  /// [cipher] is the encrypted text of the received message.
  /// Returns the plaintext of the message.
  String decrypt(String cipher)
  {
    var decrypter = Encrypter(AES(textkey));

    return decrypter.decrypt(Encrypted.fromBase64(cipher), iv: iv);
  }

  /// Turns the textkey and the iv into "keyText,iv" format, encrypted by the user's password.
  ///
  /// Intended for storing encrypter data long-term in a database. Do not modify output.
  String encodeData()
  {
    var encrypter = Encrypter(AES(passkey));
    var encryptedKey = encrypter.encrypt(textkey.base64, iv: iv);

    return encryptedKey.base64 + ',' + iv.base64;
  }

  /// The key generated from the password.
  String get passKey  => passkey.base64;
  
  /// The key generated to encrypt text.
  String get textKey  => textkey.base64;
  
  /// The initialization vector.
  String get ivText   => iv.base64;
}
